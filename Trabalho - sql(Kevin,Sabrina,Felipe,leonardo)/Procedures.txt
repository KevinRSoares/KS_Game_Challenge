--Legenda Tipos de Log
--- A = Acesso
--- E = Erro
--- C = Cadastro
--- D = Deleção
--- W = Warning - Aviso
--- P = Referente a Logs de Partidas

--Store Procedures

	---Procedure insere Log
	DELIMITER $
	CREATE PROCEDURE insere_log(IN desLog varchar(80),IN tipoLog varchar(1))
	BEGIN
		insert into log(DatHorLog, DesLog, TipLog) values(now(), deslog, tipoLog);
	END
	$
	---Procedure insere Log

	---Procedure Cadastra Usuario
	DELIMITER $
	CREATE PROCEDURE Cadastra_Usuario(
	IN NoUsu varchar(45),/*Nome do Usuario*/ 
	IN EmUsu varchar(100),/*Email*/ 
	IN DtNaUsu Date,/*Data de Nascimento*/ 
	IN NiUsu varchar(20),/*NickName/Login*/
	IN SeUsu varchar(20),/*Senha*/
	IN TiUsu char(1)/*Tipo de Usuário*/ 
	)
	BEGIN
		Declare DtCaUsu dateTime default now();/*Data de Cadastro de Usuario*/ 
		Declare desLog varchar(80);
		Declare Email_Nick_duplicado condition for sqlstate '23000';
		Declare exit handler for Email_Nick_duplicado
		begin
			Set desLog = concat('Email ou NickName duplicados: Email - ',EmUsu,' | NickName - ',NiUsu);
			call insere_log(desLog,'W');
			select 'Email ou NickName já cadastrados!';
		End;    
		Insert Into Usuario(NomUsu,EmaUsu,NicUsu,SenUsu,DatNasUsu,DatCadUsu,TipUsu)
			Values(NoUsu,EmUsu,NiUsu,md5(SeUsu),DtNaUsu,DtCaUsu,TiUsu);
			Select 'Jogador cadastrado com sucesso!';
		
	END
	$
	---Procedure Cadastra Usuario

	---Procedure Inicia Partida
	DELIMITER $
	CREATE PROCEDURE Inicia_Partida(
	IN CoUsu Int,/*Código do Usuario*/
	OUT CoPar Int /*Código da Partida Iniciada*/
	)
	BEGIN
		Declare desLog varchar(80);
		Insert Into Partida(CodUsu,DatHorIniPar)
			Values(CoUsu,Now());
		Select Max(CodPar) from Partida Where CodUsu = CoUsu into CoPar;
		Set DesLog = Concat('Usuário ',CoUsu,' iniciou partida de código ', CoPar,'.');
		call insere_log(desLog,'P');    
	END
	$
	---Procedure Inicia Partida
	---Procedure Finaliza Partida
	DELIMITER $
	CREATE PROCEDURE Finaliza_Pausa_Partida(
	IN CoPar Int,/*Código da Partida*/
	IN CoPon Int /*Pontuação*/
	)
	BEGIN
		Declare desLog varchar(80);
		Declare DtFimPar DateTime default Now();
		
		Update Partida set PonPar = CoPon Where CodPar = CoPar;
		Update Partida set DatHorFimPar = DtFimPar Where CodPar = CoPar;
		
		Set DesLog = Concat('Partida ',CoPar,' finalizada_Pausada Data/Hora: ',DtFimPar);
		call insere_log(desLog,'P');    
	END
	$
	---Procedure Finaliza Partida
	---Procedure Reinicia Partida
	DELIMITER $
	CREATE PROCEDURE Reinicia_Partida(
	IN CoPar Int/*Código da Partida*/
	)
	BEGIN
		Declare desLog varchar(80);
		Declare DtIniPar DateTime default Now();
		
		Update Partida set PonPar = 0 Where CodPar = CoPar;
		Update Partida set DatHorIniPar = DtIniPar Where CodPar = CoPar;
		Update Partida set DatHorFimPar = null Where CodPar = CoPar;
		
		Set DesLog = Concat('Partida ',CoPar,' Reiniciada.');
		call insere_log(desLog,'P');    
	END
	$
	---Procedure Reinicia Partida
	---Procedure Top 10 individual
	DELIMITER $
	CREATE PROCEDURE top10_individual(IN codigo int)
	BEGIN
		select Ponpar from partida where CodUsu = codigo order by Ponpar desc limit 10;

	END
	$	
	---Procedure Top 10 individual	
	---Procedure Deleta partidas em aberto
	DELIMITER $
		CREATE PROCEDURE deleta_partidas_abertas()
		BEGIN
			DECLARE done INT DEFAULT FALSE;
			Declare CoPar int;
			DECLARE CursorDeletar CURSOR FOR select CodPar from Partida Where DatHorIniPar < date_sub(Now(), interval 3 day) and isnull(DatHorFimPar);
			DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
			open CursorDeletar;
			read_loop: LOOP
				FETCH CursorDeletar INTO CoPar;
				IF done THEN
				  LEAVE read_loop;
				END IF;

				Delete from Partida Where CodPar = CoPar;

			END LOOP;

			#Fecha o cursor
			close CursorDeletar;        
		END
	$	
	---Procedure Deleta partidas em aberto	
--Store Procedures